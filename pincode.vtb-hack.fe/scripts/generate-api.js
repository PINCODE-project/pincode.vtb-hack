#!/usr/bin/env node

const https = require("https");
const http = require("http");
const fs = require("fs");
const path = require("path");
const { exec } = require("child_process");
const { config } = require("@dotenvx/dotenvx");

config({
	path: `.env.${process.env.NODE_ENV ?? "development"}`,
});

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç OpenAPI —Å—Ö–µ–º—É –∏–∑ API –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–∏–ø—ã —Å –ø–æ–º–æ—â—å—é kubb
 */
async function generateApi() {
	try {
		// –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
		const apiBaseUrl = "https://localhost:3000/backend";
		const docsEndpoint = `${apiBaseUrl}/api/core/docs-json`;

		console.log(`üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º OpenAPI —Å—Ö–µ–º—É –∏–∑: ${docsEndpoint}`);

		// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—É
		const openApiSchema = await fetchOpenApiSchema(docsEndpoint);

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ openapi.json
		const openApiPath = path.join(process.cwd(), "openapi.json");
		fs.writeFileSync(openApiPath, JSON.stringify(openApiSchema, null, 2));
		console.log(`‚úÖ OpenAPI —Å—Ö–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: ${openApiPath}`);

		// –ó–∞–ø—É—Å–∫–∞–µ–º kubb generate
		console.log("üîß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏ —Ö—É–∫–∏...");
		await runKubbGenerate();

		console.log("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ API:", error.message);
		process.exit(1);
	}
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç OpenAPI —Å—Ö–µ–º—É –ø–æ HTTP/HTTPS
 * @param {string} url URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ö–µ–º—ã
 * @returns {Promise<Object>} OpenAPI —Å—Ö–µ–º–∞
 */
function fetchOpenApiSchema(url) {
	return new Promise((resolve, reject) => {
		const isHttps = url.startsWith("https://");
		const isLocalhost = url.includes("localhost") || url.includes("127.0.0.1");
		const client = isHttps ? https : http;

		const options = {
			headers: {
				Accept: "application/json",
				"User-Agent": "OpenAPI-Schema-Fetcher/1.0.0",
			},
		};

		// –î–ª—è HTTPS –∏ localhost –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
		if (isHttps && isLocalhost) {
			console.log("‚ö†Ô∏è  –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è localhost");
			options.rejectUnauthorized = false;
			options.requestCert = false;
			options.agent = new https.Agent({
				rejectUnauthorized: false,
			});
		}

		const req = client.get(url, options, (res) => {
			let data = "";

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
			if (res.statusCode >= 300 && res.statusCode < 400 && res.headers.location) {
				console.log(`–†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞: ${res.headers.location}`);
				return fetchOpenApiSchema(res.headers.location).then(resolve).catch(reject);
			}

			if (res.statusCode !== 200) {
				reject(new Error(`HTTP ${res.statusCode}: ${res.statusMessage} –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ${url}`));
				return;
			}

			res.on("data", (chunk) => (data += chunk));
			res.on("end", () => {
				try {
					const schema = JSON.parse(data);
					resolve(schema);
				} catch (parseError) {
					reject(new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${parseError.message}`));
				}
			});
		});

		req.on("error", (error) => {
			let errorMessage = `–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`;

			if (error.code === "ECONNREFUSED") {
				errorMessage = `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${url}`;
			} else if (error.message.includes("certificate")) {
				errorMessage = `–ü—Ä–æ–±–ª–µ–º–∞ —Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTP –≤–º–µ—Å—Ç–æ HTTPS –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.`;
			}

			reject(new Error(errorMessage));
		});

		// –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
		req.setTimeout(30000, () => {
			req.destroy();
			reject(new Error("–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (30—Å)"));
		});
	});
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç kubb generate
 * @returns {Promise<void>}
 */
function runKubbGenerate() {
	return new Promise((resolve, reject) => {
		exec("yarn kubb generate", (error, stdout, stderr) => {
			if (error) {
				reject(new Error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è kubb generate: ${error.message}`));
				return;
			}

			if (stderr) {
				console.warn("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è kubb:", stderr);
			}

			if (stdout) {
				console.log(stdout);
			}

			resolve();
		});
	});
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –µ—Å–ª–∏ –æ–Ω –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
	generateApi();
}

module.exports = { generateApi };
