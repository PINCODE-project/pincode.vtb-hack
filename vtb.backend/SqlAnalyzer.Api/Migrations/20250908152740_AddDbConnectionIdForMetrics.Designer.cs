// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SqlAnalyzer.Api.Dal;

#nullable disable

namespace SqlAnalyzer.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250908152740_AddDbConnectionIdForMetrics")]
    partial class AddDbConnectionIdForMetrics
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IndexMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DbConnectionId")
                        .HasColumnType("uuid");

                    b.Property<double>("Efficiency")
                        .HasColumnType("double precision");

                    b.Property<string>("IndexName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("IndexScans")
                        .HasColumnType("bigint");

                    b.Property<long>("IndexSize")
                        .HasColumnType("bigint");

                    b.Property<string>("SchemaName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TuplesFetched")
                        .HasColumnType("bigint");

                    b.Property<long>("TuplesRead")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("IndexMetrics");
                });

            modelBuilder.Entity("SqlAnalyzer.Api.Dal.Entities.DbConnection.DbConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Database")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DbConnections");
                });

            modelBuilder.Entity("SqlAnalyzer.Api.Dal.Entities.Monitoring.AutovacuumStat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ChangeRatePercent")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DbConnectionId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("DeadTupleRatio")
                        .HasColumnType("decimal(5,2)");

                    b.Property<long>("DeadTuples")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastAutoVacuum")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastVacuum")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LiveTuples")
                        .HasColumnType("bigint");

                    b.Property<string>("SchemaName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("TableSize")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AutovacuumStats");
                });

            modelBuilder.Entity("SqlAnalyzer.Api.Dal.Entities.Monitoring.CacheHitStats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("BlksHit")
                        .HasColumnType("bigint");

                    b.Property<long>("BlksRead")
                        .HasColumnType("bigint");

                    b.Property<decimal>("CacheHitRatio")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DbConnectionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("CacheHitStats");
                });

            modelBuilder.Entity("SqlAnalyzer.Api.Dal.Entities.Monitoring.TableStatictics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("CountSeqScan")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DbConnectionId")
                        .HasColumnType("uuid");

                    b.Property<long>("IndexCountSeqScan")
                        .HasColumnType("bigint");

                    b.Property<decimal>("IndexUsageRatio")
                        .HasColumnType("numeric");

                    b.Property<string>("SchemaName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TuplesFetchedIndexScan")
                        .HasColumnType("bigint");

                    b.Property<long>("TuplesReadCountSeqScan")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TableStatictics");
                });

            modelBuilder.Entity("SqlAnalyzer.Api.Dal.Entities.Monitoring.TempFilesStatsDal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DbConnectionId")
                        .HasColumnType("uuid");

                    b.Property<long>("TempBytes")
                        .HasColumnType("bigint");

                    b.Property<long>("TempFiles")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TempFilesStats");
                });

            modelBuilder.Entity("SqlAnalyzer.Api.Dal.Entities.QueryAnalysis.QueryAnalysis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AnalyzeResult")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DbConnectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("QueryAnalysis");
                });
#pragma warning restore 612, 618
        }
    }
}
