// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SqlAnalyzer.Api.Dal;

#nullable disable

namespace SqlAnalyzer.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250918115929_AddCustomRules")]
    partial class AddCustomRules
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IndexMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DbConnectionId")
                        .HasColumnType("uuid");

                    b.Property<double>("Efficiency")
                        .HasColumnType("double precision");

                    b.Property<string>("IndexName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("IndexScans")
                        .HasColumnType("bigint");

                    b.Property<long>("IndexSize")
                        .HasColumnType("bigint");

                    b.Property<string>("SchemaName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TuplesFetched")
                        .HasColumnType("bigint");

                    b.Property<long>("TuplesRead")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("IndexMetrics");
                });

            modelBuilder.Entity("SqlAnalyzer.Api.Dal.Entities.Algorithm.SqlAnalyzeRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Recommendation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Regex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Severity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SqlAnalyzeRules");
                });

            modelBuilder.Entity("SqlAnalyzer.Api.Dal.Entities.DbConnection.DbConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Database")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DbConnections");
                });

            modelBuilder.Entity("SqlAnalyzer.Api.Dal.Entities.Monitoring.AutovacuumStat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ChangeRatePercent")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DbConnectionId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("DeadTupleRatio")
                        .HasColumnType("decimal(5,2)");

                    b.Property<long>("DeadTuples")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastAutoVacuum")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastVacuum")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LiveTuples")
                        .HasColumnType("bigint");

                    b.Property<string>("SchemaName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("TableSize")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AutovacuumStats");
                });

            modelBuilder.Entity("SqlAnalyzer.Api.Dal.Entities.Monitoring.CacheHitStats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("BlksHit")
                        .HasColumnType("bigint");

                    b.Property<long>("BlksRead")
                        .HasColumnType("bigint");

                    b.Property<decimal>("CacheHitRatio")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DbConnectionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("CacheHitStats");
                });

            modelBuilder.Entity("SqlAnalyzer.Api.Dal.Entities.Monitoring.PgLock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApplicationName")
                        .HasColumnType("text");

                    b.Property<long?>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DatabaseOid")
                        .HasColumnType("bigint");

                    b.Property<Guid>("DbConnectionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("FastPath")
                        .HasColumnType("boolean");

                    b.Property<bool>("Granted")
                        .HasColumnType("boolean");

                    b.Property<string>("LockType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ObjectSubId")
                        .HasColumnType("integer");

                    b.Property<int?>("Page")
                        .HasColumnType("integer");

                    b.Property<int>("Pid")
                        .HasColumnType("integer");

                    b.Property<string>("Query")
                        .HasColumnType("text");

                    b.Property<DateTime?>("QueryStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("RelationOid")
                        .HasColumnType("bigint");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<long?>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Tuple")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("VirtualTransaction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VirtualXid")
                        .HasColumnType("text");

                    b.Property<long?>("WaitTimeMs")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("PgLocks");
                });

            modelBuilder.Entity("SqlAnalyzer.Api.Dal.Entities.Monitoring.TableStatictics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("CountSeqScan")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DbConnectionId")
                        .HasColumnType("uuid");

                    b.Property<long>("IndexCountSeqScan")
                        .HasColumnType("bigint");

                    b.Property<decimal>("IndexUsageRatio")
                        .HasColumnType("numeric");

                    b.Property<string>("SchemaName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TuplesFetchedIndexScan")
                        .HasColumnType("bigint");

                    b.Property<long>("TuplesReadCountSeqScan")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TableStatictics");
                });

            modelBuilder.Entity("SqlAnalyzer.Api.Dal.Entities.Monitoring.TempFilesStatsDal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DbConnectionId")
                        .HasColumnType("uuid");

                    b.Property<long>("TempBytes")
                        .HasColumnType("bigint");

                    b.Property<long>("TempFiles")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TempFilesStats");
                });

            modelBuilder.Entity("SqlAnalyzer.Api.Dal.Entities.QueryAnalysis.QueryAnalysis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DbConnectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExplainResult")
                        .HasColumnType("text");

                    b.Property<string>("Sql")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Queries");
                });

            modelBuilder.Entity("SqlAnalyzer.Api.Dal.Entities.QueryAnalysis.QueryAnalysisResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.PrimitiveCollection<List<Guid>>("FindindCustomRules")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<string>("LlmRecommendations")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("QueryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Recommendations")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("QueryId");

                    b.ToTable("QueryAnalysisResults");
                });

            modelBuilder.Entity("SqlAnalyzer.Api.Dal.Entities.QueryAnalysis.QueryAnalysisResult", b =>
                {
                    b.HasOne("SqlAnalyzer.Api.Dal.Entities.QueryAnalysis.QueryAnalysis", "Query")
                        .WithMany()
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Query");
                });
#pragma warning restore 612, 618
        }
    }
}
